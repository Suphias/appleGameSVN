using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using AntDesigner.AppleGame;
using AntDesigner.AppleGame.EF;
using Microsoft.AspNetCore.Http;
using AntDesigner.AppleGame.interFace;
using Microsoft.AspNetCore.Authorization;
using AntDesigner.weiXinPay;

// For more information on enabling MVC for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860

namespace AntDesigner.AppleGame.Controllers
{
    [Authorize(Roles = "manager")]
    public class ManageController : myController
    {
        public ManageController(IStorehouse IStorehouse, IHttpContextAccessor httpContextAccessor) : base(IStorehouse, httpContextAccessor)
        {

        }
        public IActionResult index()
        {

            return View("Index");
        }

   
        public IActionResult Index_adjustAccount(string name)
        {
            Player player = managerPlayer.findPlayerByWeixinName(name);
            if (player==null)
            {
                TempData["nofind"] = name+"查找失败";
                return View("adjustAccount", base.player);
            }
            return View("adjustAccount", player);
        }
        [HttpPost]
        public IActionResult adjustAccount(string name_,decimal  amount)
        {
            
            Player player = managerPlayer.findPlayerByWeixinName(name_);
            managerPlayer.adjustAccountBalance(player.account, amount);
            IstoreHouse.saveChanges();
            return View("adjustAccount", player);

        
        }
        public IActionResult allOfPlayer()
        {
            List<Player> players = managerPlayer.seeAllPlayers().ToList();
            return View("allOfPlayers",players);
        }
        public IActionResult Index_findPlayer()
        {
           // Player player=managerPlayer.findPlayerByWeixinName(name);
            return View("findPlayer");
        }
        public IActionResult findPlayer(string weixinName)
        {
            Player player = managerPlayer.findPlayerByWeixinName(weixinName);
            return View("findPlayer",player);
        }
        public IActionResult Index_newNotice()
        {
         
            return View("newNotice");
        }
        [HttpPost]
        public void addNewNotice(string content,bool stopTheGame)
        {
            Notice notice = new Notice(content);
            managerPlayer.publishNotice(notice);
            IstoreHouse.saveChanges();
            return ;
        }
        
        public IActionResult noticesManager()
        {
          var notices =IstoreHouse.getAllNotices() ;
            return View("notices",notices);
        }
        [HttpPost]
        public void deleteNotice(int noticeId)
        {
           
            Notice notice = IstoreHouse.getEntityById<Notice>(noticeId);
            managerPlayer.removeNotice(notice);
            IstoreHouse.saveChanges();
            return ;
        }
        [HttpPost]
        public void modifyNotice(int noticeId,string newContent)
        {
            Notice notice = IstoreHouse.getEntityById<Notice>(noticeId);
            managerPlayer.modifyNotice(notice,newContent);
            IstoreHouse.saveChanges();
            return ;
        }
        public IActionResult playersOnline() {
            List<Player> playersOnline = managerPlayer.seeOnliePlayers().ToList();
            return View("playersOnline",playersOnline);
        }
        [HttpGet]
        public IActionResult Index_sendMessageTo(string name)
        {
            ViewBag.receiverName = name;
            ViewBag.content = "";
            return View("sendMessage");
        }
        [HttpPost]
        public IActionResult sendMessage(string content,string receiverName )
        {
            Player player = managerPlayer.findPlayerByWeixinName(receiverName);
            managerPlayer.sendMessageTo(player, content);
            IstoreHouse.saveChanges();
            ViewBag.receiverName = receiverName;
            ViewBag.content = content;
            TempData["sendSuccess"] = "发送完成";
            return View("sendMessage");
        }
        public IActionResult messages(string name)
        {
            Player player = managerPlayer.findPlayerByWeixinName(name);
            IList<Message> messages = player.seeMessags();
            return View("../Message/messages", messages);
        }
        public IActionResult accountDetail(string name)
        {
            Player player= managerPlayer.findPlayerByWeixinName(name);
            List<AccountDetail> accountDetails = managerPlayer.seeAccountDetailsOfPlayer(player).OrderByDescending(a=>a.createTime).ToList();
            ViewBag.account = player.account;
            return View("../Account/accountDetail", accountDetails);
        }
        public IActionResult setGameDegree(string degree)
        {
            managerPlayer.setGameDegree(degree);
            return View("Index");
        }
        public IActionResult Index_redPackges()
        {
            return View("Index_redPackges");
        }
        public IActionResult redPackges(string fromDateStr,string toDateStr )
        {
            DateTime fromDate, toDate;
            strToDateTime(fromDateStr, toDateStr, out fromDate, out toDate);
            IList<RedPack> redPackges = managerPlayer.getRedPackgeList(fromDate, toDate);
            return View("redPackges", redPackges);
        }
        public IActionResult Index_rechargeOrders()
        {
            return View("Index_rechargeOrders");
        }
        public IActionResult rechargeOrders(string fromDateStr, string toDateStr)
        {
            DateTime fromDate, toDate;
            strToDateTime(fromDateStr, toDateStr, out fromDate, out toDate);
           IList<PayOrder> rechargeOrders = managerPlayer.getPayOrderList(fromDate, toDate);
            return View("rechargeOrders", rechargeOrders);
        }
        private static void strToDateTime(string fromDateStr, string toDateStr, out DateTime fromDate, out DateTime toDate)
        {
            try
            {
                fromDate = Convert.ToDateTime(fromDateStr);
                if (toDateStr.Length == 0)
                {
                    toDate = DateTime.Now;
                    return;
                }
                toDate = Convert.ToDateTime(toDateStr);
            }
            catch (Exception e)
            {
                DateTime today = DateTime.Now.Date;
                fromDate = today;
                toDate = today.AddDays(1);
            }
        }
    }
}
